name: ci

on:
  push:
    branches:
      - main
  pull_request: {}

env:
  COLUMNS: 150

jobs:
  test-cpython:
    name: test ${{ matrix.python-version }} rust ${{ matrix.rust-toolchain }}
    strategy:
      fail-fast: false
      matrix:
        rust-toolchain:
          - nightly
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
        include:
          - rust-toolchain: stable
            python-version: '3.10'

    runs-on: ubuntu-latest

    env:
      PYTHON: ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v3

      - run: rm rust-toolchain

      - name: install rust ${{ matrix.rust-toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-toolchain }}

      - id: cache-rust
        name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: v5

      - run: cargo install rustfilt coverage-prepare
        if: steps.cache-rust.outputs.cache-hit != 'true'

      - run: rustup component add llvm-tools-preview

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - id: cache-py
        name: cache python
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: >
            py-v2
            ${{ runner.os }}
            ${{ env.pythonLocation }}
            ${{ hashFiles('tests/requirements.txt') }}
            ${{ hashFiles('pyproject.toml') }}

      - run: pip install -r tests/requirements.txt
        if: steps.cache-py.outputs.cache-hit != 'true'

      - run: pip install -e .
        env:
          RUST_BACKTRACE: 1
          RUSTFLAGS: '-C instrument-coverage'

      - run: pip freeze

      - run: make test
        env:
          BENCHMARK_VS_PYDANTIC: 1
          HYPOTHESIS_PROFILE: slow

      - run: ls -lha
      - run: coverage xml

      - run: coverage-prepare lcov pydantic_core/*.so

      - uses: codecov/codecov-action@v3
        if: matrix.rust-toolchain == 'nightly'
        with:
          env_vars: PYTHON

  # See https://github.com/PyO3/pyo3/discussions/2781
  # tests intermittently segfault with pypy when using `coverage run ...`, hence separate job
  test-pypy:
    name: test ${{ matrix.python-version }} rust stable
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 'pypy3.7'
          - 'pypy3.8'
          - 'pypy3.9'

    runs-on: ubuntu-latest

    env:
      PYTHON: ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v3

      - run: rm rust-toolchain

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: pypy-v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - id: cache-py
        name: cache python
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: >
            py
            ${{ runner.os }}
            ${{ env.pythonLocation }}
            ${{ hashFiles('tests/requirements.txt') }}
            ${{ hashFiles('pyproject.toml') }}

      - run: pip install -r tests/requirements.txt
        if: steps.cache-py.outputs.cache-hit != 'true'

      - run: pip install -e .
        env:
          RUST_BACKTRACE: 1

      - run: pip freeze

      - run: pytest

  test-os:
    name: test on ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3

      - name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-v1

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - run: pip install -r tests/requirements.txt

      - run: pip install -e .
        env:
          RUST_BACKTRACE: 1

      - run: pip freeze

      - run: pytest

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - run: rm rust-toolchain
      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: cache rust
        uses: Swatinem/rust-cache@v2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # used to lint js code
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - uses: actions/cache@v3
        id: cache-py
        name: cache python
        with:
          path: ${{ env.pythonLocation }}
          key: >
            py
            ${{ env.pythonLocation }}
            ${{ hashFiles('tests/requirements-linting.txt') }}
            ${{ hashFiles('pyproject.toml') }}

      - run: pip install -r tests/requirements-linting.txt
        if: steps.cache-py.outputs.cache-hit != 'true'

      - run: pip install .
        if: steps.cache-py.outputs.cache-hit != 'true'

      - run: pip freeze

      - run: make lint
      - run: make pyright

      - run: npm install
      - run: npm run lint

  bench:
    name: rust benchmarks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - run: rm rust-toolchain
      - name: install rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: cache rust
        uses: Swatinem/rust-cache@v2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - run: pip install typing_extensions
      - run: make rust-benchmark

  # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: [test-cpython, test-pypy, test-os, lint, bench]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
